@startuml
class BackgroundColor {
  +mainCamera : Camera
}
class LevelExitTrigger {
  +unlockedIndicator : GameObject
  +fadeCanvasGroup : CanvasGroup
  -triggerCollider : Collider2D
  -indicatorStartPosition : Vector3
}
class TimerController {
  +timerText : TMP_Text
  -startTime : float
  -stopTime : float
}
class EnemyData {
  +defaultSprite : Sprite
  +deathSprite : Sprite
}
class WeaponData {
  +playerSprite : Sprite
  +weaponIcon : Sprite
  +pickupPrefab : GameObject
  +projectilePrefab : GameObject
  +shootSound : AudioClip
  +emptyClickSound : AudioClip
  +muzzleFlashPrefab : GameObject
  +hitSound : AudioClip
  +missSound : AudioClip
  +attackSprite : Sprite
  +attackSprite2 : Sprite
  +currentAmmo : int
}
class BossEnemy {
  +dashSound : AudioClip
  -baseEnemy : Enemy
  -rb : Rigidbody2D
  -spriteRenderer : SpriteRenderer
  -originalColor : Color
  -player : Transform
  -lastDashTime : float
  -currentCooldown : float
  -audioSource : AudioSource
  -enemyEquipment : EnemyEquipment
  -lastHitWeapon : WeaponData
}
class Enemy {
  +enemyData : EnemyData
  -player : Transform
  +wallLayer : LayerMask
  -nextShootTime : float
  -hasSpottedPlayer : bool
  -lastSpottedTime : float
  -lastAttackTime : float
  -attackAnimationCoroutine : Coroutine
  -enemyEquipment : EnemyEquipment
  -fistWeaponData : WeaponData
  -rb : Rigidbody2D
  -patrolDirection : Vector2
  -randomModeTimer : float
  -isMovingInRandomMode : bool
  -targetRotation : Quaternion
  -waitTimer : float
  -isWaiting : bool
  -currentPathIndex : int
  -lastPathUpdateTime : float
  -lastPosition : Vector2
  -lastStuckCheckTime : float
  -currentState : State
  -currentHealth : float
  +gCost : int
  +hCost : int
}
class PathNode {
  +enemyData : EnemyData
  -player : Transform
  +wallLayer : LayerMask
  -nextShootTime : float
  -hasSpottedPlayer : bool
  -lastSpottedTime : float
  -lastAttackTime : float
  -attackAnimationCoroutine : Coroutine
  -enemyEquipment : EnemyEquipment
  -fistWeaponData : WeaponData
  -rb : Rigidbody2D
  -patrolDirection : Vector2
  -randomModeTimer : float
  -isMovingInRandomMode : bool
  -targetRotation : Quaternion
  -waitTimer : float
  -isWaiting : bool
  -currentPathIndex : int
  -lastPathUpdateTime : float
  -lastPosition : Vector2
  -lastStuckCheckTime : float
  -currentState : State
  -currentHealth : float
  +gCost : int
  +hCost : int
}
class EnemyEquipment {
  -enemySpriteRenderer : SpriteRenderer
  -defaultWeaponData : WeaponData
  -fistWeaponData : WeaponData
}
class IncomingSoundDetector {
  -enemyController : Enemy
}
class Bullet {
  -rb : Rigidbody2D
  -spriteRenderer : SpriteRenderer
  -bulletCollider : Collider2D
  -shooter : GameObject
  -travelDirection : Vector2
  -weaponData : WeaponData
  -startPosition : Vector3
  -lineRenderer : LineRenderer
  -tracerTimer : float
}
class WeaponPickup {
  +weaponData : WeaponData
  -spriteRenderer : SpriteRenderer
  -triggerComponent : WeaponPickupTrigger
}
class WeaponPickupTrigger {
}
class GunPickup {
  -rb : Rigidbody2D
}
class DoorController {
  +audioSource : AudioSource
  +doorOpenSound : AudioClip
  +initialRotation : Quaternion
  -doorTriggerZone : GameObject
  -doorController : DoorController
}
class TriggerHandler {
  +audioSource : AudioSource
  +doorOpenSound : AudioClip
  +initialRotation : Quaternion
  -doorTriggerZone : GameObject
  -doorController : DoorController
}
class EntranceDoubleDoorController {
  +leftDoor : GameObject
  +rightDoor : GameObject
  +audioSource : AudioSource
  +closingSound : AudioClip
  +lockedSound : AudioClip
  +unlockSound : AudioClip
  +currentFloor : FloorManager
  -leftDoorController : DoorController
  -rightDoorController : DoorController
  -leftDoorCollider : Collider2D
  -rightDoorCollider : Collider2D
  -softLockPreventor : GameObject
  -doorController : EntranceDoubleDoorController
}
class public {
  +leftDoor : GameObject
  +rightDoor : GameObject
  +audioSource : AudioSource
  +closingSound : AudioClip
  +lockedSound : AudioClip
  +unlockSound : AudioClip
  +currentFloor : FloorManager
  -leftDoorController : DoorController
  -rightDoorController : DoorController
  -leftDoorCollider : Collider2D
  -rightDoorCollider : Collider2D
  -softLockPreventor : GameObject
  -doorController : EntranceDoubleDoorController
}
class SoftLockPreventorTrigger {
  +leftDoor : GameObject
  +rightDoor : GameObject
  +audioSource : AudioSource
  +closingSound : AudioClip
  +lockedSound : AudioClip
  +unlockSound : AudioClip
  +currentFloor : FloorManager
  -leftDoorController : DoorController
  -rightDoorController : DoorController
  -leftDoorCollider : Collider2D
  -rightDoorCollider : Collider2D
  -softLockPreventor : GameObject
  -doorController : EntranceDoubleDoorController
}
class FloorAccessController {
  +currentFloor : FloorManager
  +destinationFloor : FloorManager
  +destinationPoint : Transform
  +unlockedIndicator : GameObject
  +fadeCanvasGroup : CanvasGroup
  -indicatorStartPosition : Vector3
}
class FloorManager {
}
class LockedDoorController {
  +audioSource : AudioSource
  +unlockSound : AudioClip
  +lockedSound : AudioClip
  +currentFloor : FloorManager
  -initialRotation : Quaternion
}
class StairsTeleporter {
  +teleportDestination : Transform
}
class PlayerController {
  +moveSpeed : float
  -movementInput : Vector2
  -rb : Rigidbody2D
  -playerEquipment : PlayerEquipment
  +deathSprite : Sprite
  -lastFireTime : float
  -shouldShoot : bool
  -attackAnimationCoroutine : Coroutine
  +mainCamera : Camera
  -shakeTimeRemaining : float
  -shakeMagnitude : float
  -isLooking : bool
  -timerController : TimerController
  -uiManager : UIManager
  +playerAudioSource : AudioSource
  -nearbyWeaponPickup : WeaponPickup
  -fistWeaponData : WeaponData
}
class PlayerEquipment {
  -playerSpriteRenderer : SpriteRenderer
  -fistWeaponData : WeaponData
}
class PowerUpManager {
  +backButton : Button
  -sceneToLoad : string
  +powerUpName : string
  +type : PowerUpType
}
class PowerUpData {
  +backButton : Button
  -sceneToLoad : string
  +powerUpName : string
  +type : PowerUpType
}
class SoundDetectionField {
  -soundCollider : CircleCollider2D
  -playerEquipment : PlayerEquipment
  +wallLayer : LayerMask
}
class AmmoDisplay {
  +ammoText : TextMeshProUGUI
  +weaponIconImage : Image
  +playerController : PlayerController
  -playerEquipment : PlayerEquipment
}
class LevelSelectManager {
  +levelButtonPrefab : GameObject
  +levelButtonsContainer : Transform
  +backButton : Button
  +fadeCanvasGroup : CanvasGroup
  -sceneToLoad : string
  +levelName : string
  +sceneName : string
  +levelPreview : Sprite
}
class LevelData {
  +levelButtonPrefab : GameObject
  +levelButtonsContainer : Transform
  +backButton : Button
  +fadeCanvasGroup : CanvasGroup
  -sceneToLoad : string
  +levelName : string
  +sceneName : string
  +levelPreview : Sprite
}
class MainMenuManager {
  +mainMenuPanel : GameObject
  +optionsPanel : GameObject
  +controlsImage : Image
  +backButton : Button
}
class Restart {
  -uiManager : UIManager
  -scoreManager : ScoreManager
  -ammoDisplay : AmmoDisplay
}
class ScoreManager {
  +scoreText : TextMeshProUGUI
  -comboTimerCoroutine : Coroutine
}
class ScoreScreenManager {
  +killsValue : TextMeshProUGUI
  +comboBonusValue : TextMeshProUGUI
  +timeBonusValue : TextMeshProUGUI
  +accuracyValue : TextMeshProUGUI
  +finalScoreValue : TextMeshProUGUI
  +gradeValue : TextMeshProUGUI
  +completionTimeValue : TextMeshProUGUI
  +retryButton : Button
  +backButton : Button
}
class UIManager {
  +hudPanel : GameObject
  +pauseMenuScreen : GameObject
  +gameOverScreen : GameObject
  +levelCompleteScreen : GameObject
  +scoreText : TextMeshProUGUI
  +timerText : TextMeshProUGUI
  +ammoText : TextMeshProUGUI
  -scoreManager : ScoreManager
  -timerController : TimerController
  -playerEquipment : PlayerEquipment
}
class VolumeManager {
  +volumeSlider : Slider
}
@enduml